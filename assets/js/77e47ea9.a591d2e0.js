"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6260],{54651:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/growe/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Requirements Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"System Overview","href":"/growe/docs/requirements/system-overview","docId":"requirements/system-overview","unlisted":false},{"type":"link","label":"System Block Diagram","href":"/growe/docs/requirements/system-block-diagram","docId":"requirements/system-block-diagram","unlisted":false},{"type":"link","label":"General Requirements","href":"/growe/docs/requirements/general-requirements","docId":"requirements/general-requirements","unlisted":false},{"type":"link","label":"Features and Requirements","href":"/growe/docs/requirements/features-and-requirements","docId":"requirements/features-and-requirements","unlisted":false},{"type":"link","label":"Use-case descriptions / Sequence Diagram","href":"/growe/docs/requirements/use-case-descriptions","docId":"requirements/use-case-descriptions","unlisted":false}],"href":"/growe/docs/category/requirements-specification"},{"type":"category","label":"System Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"design","href":"/growe/docs/system-architecture/design","docId":"system-architecture/design","unlisted":false},{"type":"link","label":"Development Environment","href":"/growe/docs/system-architecture/development-environment","docId":"system-architecture/development-environment","unlisted":false},{"type":"link","label":"Version Control","href":"/growe/docs/system-architecture/version-control","docId":"system-architecture/version-control","unlisted":false}],"href":"/growe/docs/category/system-architecture"},{"type":"category","label":"API Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Design Document - Part II API","href":"/growe/docs/api-specification/design-api-intro","docId":"api-specification/design-api-intro","unlisted":false},{"type":"link","label":"API 1 - Swagger Petstore","href":"/growe/docs/api-specification/openapi-spec","docId":"api-specification/openapi-spec","unlisted":false},{"type":"link","label":"CalculatorModel.java","href":"/growe/docs/api-specification/calculator-model-generated","docId":"api-specification/calculator-model-generated","unlisted":false}],"href":"/growe/docs/category/api-specification"},{"type":"category","label":"Test Procedures","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Unit tests","href":"/growe/docs/testing/unit-testing","docId":"testing/unit-testing","unlisted":false},{"type":"link","label":"Integration tests","href":"/growe/docs/testing/integration-testing","docId":"testing/integration-testing","unlisted":false},{"type":"link","label":"Acceptance test","href":"/growe/docs/testing/acceptence-testing","docId":"testing/acceptence-testing","unlisted":false}],"href":"/growe/docs/category/test-procedures"}]},"docs":{"api-specification/calculator-model-generated":{"id":"api-specification/calculator-model-generated","title":"CalculatorModel.java","description":"(generated using Javadoc to Markdown)","sidebar":"docsSidebar"},"api-specification/design-api-intro":{"id":"api-specification/design-api-intro","title":"Design Document - Part II API","description":"What should be in this section.","sidebar":"docsSidebar"},"api-specification/openapi-spec":{"id":"api-specification/openapi-spec","title":"API 1 - Swagger Petstore","description":"API Specification from openapi.yml","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"A collaborative habit-building app that leverages social accountability to help users establish and maintain positive routines. Users join groups centered around specific habits\u2014such as cleaning, going to the library to study, or exercising\u2014and participate in check-ins that require evidence of their progress in the form of photos (like BeReal). Group members validate each other\'s check-ins, creating a supportive community that fosters commitment and consistency. If users cumulatively miss the required number of check ins, not only does the streak visibly reset but a beautiful unique plant that was once growing is uprooted and reset (like Forest), adding a gentle layer of peer accountability. To motivate ongoing participation, consistent users earn badges and unlock new plants. By combining habit tracking with peer validation, this idea transforms personal goal-setting into a shared journey, enhancing motivation through collective encouragement and accountability.","sidebar":"docsSidebar"},"requirements/features-and-requirements":{"id":"requirements/features-and-requirements","title":"Features and Requirements","description":"This is the life cycle of a user on this app for a three person group with the goal to workout 3 days a week:","sidebar":"docsSidebar"},"requirements/general-requirements":{"id":"requirements/general-requirements","title":"General Requirements","description":"This app uses React Native Expo as a frontend mobile framework, Firebase as a backend for storing user data, assets, and group data. It also will likely use Stable Diffusion 3.5 Large to generate assets.","sidebar":"docsSidebar"},"requirements/system-block-diagram":{"id":"requirements/system-block-diagram","title":"System Block Diagram","description":"Class Diagram","sidebar":"docsSidebar"},"requirements/system-overview":{"id":"requirements/system-overview","title":"System Overview","description":"","sidebar":"docsSidebar"},"requirements/use-case-descriptions":{"id":"requirements/use-case-descriptions","title":"Use-case descriptions / Sequence Diagram","description":"Use Case: Signing Up from login page","sidebar":"docsSidebar"},"system-architecture/design":{"id":"system-architecture/design","title":"design","description":"Purpose","sidebar":"docsSidebar"},"system-architecture/development-environment":{"id":"system-architecture/development-environment","title":"Development Environment","description":"","sidebar":"docsSidebar"},"system-architecture/version-control":{"id":"system-architecture/version-control","title":"Version Control","description":"","sidebar":"docsSidebar"},"testing/acceptence-testing":{"id":"testing/acceptence-testing","title":"Acceptance test","description":"Demonstration of all of the functional and non-functional requirements. This can be a combination of automated tests derived from the use-cases (user stories) and manual tests with recorded observation of the results.","sidebar":"docsSidebar"},"testing/integration-testing":{"id":"testing/integration-testing","title":"Integration tests","description":"Tests to demonstrate each use-case based on the use-case descriptions and the sequence diagrams. External input should be provided via mock objects and results verified via mock objects. Integration tests should not require manual entry of data nor require manual interpretation of results.","sidebar":"docsSidebar"},"testing/unit-testing":{"id":"testing/unit-testing","title":"Unit tests","description":"For each method, one or more test cases.","sidebar":"docsSidebar"}}}}')}}]);